{{>header}}

import type { ApiQuery } from '../core/ApiQuery'
{{#equals @root.httpClient 'angular'}}
{{#if @root.exportClient}}
import { Injectable } from '@angular/core';
import type { Observable } from 'rxjs';
{{else}}
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import type { Observable } from 'rxjs';
{{/if}}

{{/equals}}
{{#if imports}}
{{#each imports}}
import type { {{{this}}} } from '../models/{{{this}}}';
{{/each}}

{{/if}}
{{#notEquals @root.httpClient 'angular'}}
import type { CancelablePromise } from '../core/CancelablePromise';
{{/notEquals}}
{{#if @root.exportClient}}
{{#equals @root.httpClient 'angular'}}
import { BaseHttpRequest } from '../core/BaseHttpRequest';
{{else}}
import type { BaseHttpRequest } from '../core/BaseHttpRequest';
{{/equals}}
{{else}}
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
{{/if}}

{{#equals @root.httpClient 'angular'}}
@Injectable({
  providedIn: 'root',
})
{{/equals}}

{{#each operations}}
export type {{{name}}}Input = {
	{{#if parametersQuery}}
	query: {
		{{#each parametersQuery}}
		{{{name}}}{{>isRequired}}: {{>type}}
		{{/each}}
	},
	{{/if}}
	{{#if parametersPath}}
	path: {
		{{#each parametersPath}}
		{{{name}}}{{>isRequired}}: {{>type}}
		{{/each}}
	},
	{{/if}}
	{{#if parametersBody}}
	body: {{>type parametersBody}},
	{{/if}}
}
{{/each}}

export class {{{name}}}{{{@root.postfix}}} {
	{{#if @root.exportClient}}

	constructor(public readonly httpRequest: BaseHttpRequest) {}
	{{else}}
	{{#equals @root.httpClient 'angular'}}

	constructor(public readonly http: HttpClient) {}
	{{/equals}}
	{{/if}}

	{{#each operations}}

	static {{{name}}}Options: ApiQuery<{{>result}}, {{{name}}}Input> = {
		url: '{{path}}',
		method: '{{method}}',
		name: '{{name}}',
		inputs: [
			{{#each parameters}}
			'{{{name}}}',
			{{/each}}
		],
		{{#if parametersQuery}}
		query: {
			{{#each parametersQuery}}
			'{{{prop}}}': '{{{name}}}',
			{{/each}}
		},
		{{/if}}
		{{#if parametersPath}}
		path: {
			{{#each parametersPath}}
			'{{{prop}}}': '{{{name}}}',
			{{/each}}
		},
		{{/if}}
		{{#if parametersBody}}
		bodyJsonModel: '${{>type parametersBody}}',
		{{/if}}
		outputJsonModel: '${{>result}}',
	}

	{{/each}}
}
